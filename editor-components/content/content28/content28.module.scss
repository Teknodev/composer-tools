@use '../../../composer-base-components/base/utitilities/viewports.module.scss' as *;

.container {
  .max-content {
    margin: 0 auto; // center within Base.Container like other contents
    min-height: 40rem;
    --c28-scale: 1.3; // Scale factor for responsive font sizing

    // Main layout aligned with content10: two flex columns
    .grid {
      display: flex;
      gap: var(--composer-gap-xl);
      align-items: flex-start; // don't stretch columns; respect fixed image height
      > * { min-width: 0; }
    }

    // Layout with vertical divider line (fixed width divider)
    .has-line {
      .center-line { flex: 0 0 2px; }
    }
    
    // Vertical divider between image and content
    .center-line { 
      width: 0.125rem; 
      background-color: var(--composer-border-color, rgba(0,0,0,0.08)); 
    }

    // Image column container
    .col-image {
      flex: 1;
      background: var(--composer-background-color);
      padding: 0;
      position: relative;
      height: calc(40rem * var(--c28-scale)); // fixed height that scales with text
      overflow: hidden;
      border: 0.0625rem solid rgba(0,0,0,0.06);
      border-radius: 0.25rem;
    }

    // Image element with smooth zoom effect
    .image {
      width: 100%;
      height: 100%;
      display: block;
      object-fit: contain; // fit entire image without cropping, maintaining aspect ratio
      object-position: left top; // align image to the top-left to remove top gap
      transition: transform .35s ease, filter .35s ease;
    }

    // Hover effect: subtle zoom and brightness
    .col-image:hover .image {
      transform: scale(1.035);
      filter: brightness(1.02);
      cursor: pointer;
    }

    // Content column with header and features
    .col-content {
      flex: 2;
      display: flex;
      flex-direction: column;
      gap: var(--composer-gap-xl);
      min-width: 0; // Prevent overflow
      min-height: calc(40rem * var(--c28-scale)); // match image height for full clickable area
      align-items: stretch; // make children take full width of column
      justify-content: flex-start; // Start children from the top
      text-align: left;

      // Header section should not be centered
      .header {
        align-items: flex-start;
        text-align: left;
        margin: 0; // remove extra spacing
      }

      // Explicitly left-align heading and intro texts
      .heading { text-align: left; margin: 0; }
      .intro { text-align: left; margin: 0; }

      // Features container
      .features-block {
        display: flex;
        flex-direction: column;
        gap: var(--composer-gap-lg);

        // Dynamic grid for features based on itemsPerRow prop
        .features {
          --items-per-row: 2; // default fallback
          display: grid;
          grid-template-columns: repeat(var(--items-per-row), 1fr);
          gap: var(--composer-gap-xl);
          align-items: start;

          .feature {
            // Feature title with scale animation
            .feature-title {
              font-size: calc(1.5rem * var(--c28-scale)); // Responsive sizing
              font-weight: 500;
              text-align: left;
              color: var(--composer-primary-color);
              padding: 0;
              margin: 0 0 var(--composer-gap-sm) 0;
              transform: none;
              cursor: pointer;
              transition: transform 0.3s ease;
              background: transparent !important; // remove badge-like backgrounds
              box-shadow: none !important;
              
              // Scale up on hover
              &:hover {
                transform: scale(1.1);
              }
              
              // Remove default pseudo-element
              &::before {
                display: none;
                content: none;
              }
              &::after {
                display: none;
                content: none;
              }
            }

            // Feature description text
            .feature-text {
              margin: 0;
              padding: 0;
              color: var(--composer-font-color-primary);
              text-align: left;
            }
          }
        }
      }
    }
  }
}

// Tablet responsive styles
@container (max-width: #{$composer-tablet-width}) {
  .container {
    .max-content {
      min-height: 32.5rem;
      --c28-scale: 1.1; // Reduced scale for tablet

      .grid {
        gap: var(--composer-gap-lg);
      }

      .col-image {
        height: calc(35rem * var(--c28-scale)); // Adjusted for tablet
        border: none; // remove borders on tablet
      }

      .col-content {
        min-height: calc(35rem * var(--c28-scale)); // match tablet image height
      }

      // Single column for features
      .features {
        grid-template-columns: 1fr;
      }
    }
  }
}

// Mobile responsive styles
@container (max-width: #{$composer-phone-width}) {
  .container {
    .max-content {
      min-height: unset;
      --c28-scale: 1; // Normal scale for mobile

      // Stack layout: image on top, content below
      .grid {
        flex-direction: column; // stack vertically on mobile
        gap: var(--composer-gap-lg);
      }

      .center-line { display: none; } // Hide divider on mobile

      .col-image {
        order: -1; // Image first
        height: calc(25rem * var(--c28-scale)); // Smaller on mobile
      }

      .col-content {
        min-height: auto; // no minimum on mobile, stack naturally
      }

      // Single column for features with reduced gap
      .features {
        gap: var(--composer-gap-md);
        grid-template-columns: 1fr;
      }
    }
  }
}
