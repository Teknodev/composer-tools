@use "../../../../composer-tools//composer-base-components//base//utitilities/viewports.module.scss"
  as *;

.container {
  .max-content {
    display: flex;
    flex-direction: column;
    .wrapper {
      display: flex;
      flex-direction: column;
      gap: var(--composer-gap-md);
      .vertical-content {
        .card-titles {
          .subtitle {
            content: "";
          }
        }
        
        .title-container {
          display: flex;
          flex-direction: column;
          .title {
            margin: 0;
          }
        }
        .subTitle-container {
          .subTitle {
            color: var(--composer-tertiary-color);
          }
        }
      }

      .grid {
        .card {
          display: flex;
          flex-direction: column;
          align-items: center;
          background-color: color-mix(
            in srgb,
            var(--composer-html-background),
            var(--composer-font-color-primary) 5%
          );
          border-radius: var(--composer-border-radius-md);
          padding: var(--composer-gap-md);
          transition: all var(--composer-transition-duration-slow) ease-in-out;
          .card-items {
            display: flex;
            flex-direction: column;
            gap: var(--composer-gap-md);
            .card-image-container {
              transition: transform 0.5s ease-in-out;
              border-radius: var(--composer-border-radius-md);
              overflow: hidden;
              .card-image {
                width: 100%;
                height: 100%;
                object-fit: cover;
                object-position: center;
                transition: transform 0.5s ease-in-out;
              }
            }
            .card-content{
              display: flex;
              flex-direction: column;
              gap: var(--composer-gap-md);
              
              .card-title {
              color: var(--composer-font-color-primary);
            }
            .card-description {
              color: var(--composer-tertiary-color);
            }
            .navigate-container {
              display: flex;
              align-items: center;
              color: var(--composer-primary-color);
              overflow: hidden;
              width: 100%;
              transition: transform var(--composer-transition-duration-normal) ease-in-out, opacity var(--composer-transition-duration-normal) ease-in-out;
              .navigate-to {
                margin-right: calc(var(--composer-gap-xs) / 2);
                white-space: nowrap;
              }
              .navigate-icon {
                min-width: var(--composer-gap-sm);
                min-height: var(--composer-gap-sm);
              }
            }
            }
          }
          &[data-animation~="animate1"]:hover {
            transform: translateY(calc(-1 * var(--composer-gap-sm)));
          }

          &[data-animation~="animate2"]:hover {
            .navigate-container {
              animation: slideOutFade 1.5s linear, shake 0.5s linear 2s 1;
            }
          }

          &[data-animation~="animate2"]:not(:hover) {
            .navigate-container {
              animation: resetShake 0.3s linear;
              transform: translateX(0%);
              opacity: 1;
            }
          }

          &[data-animation~="animate3"]:hover {
            .card-image-container {
              overflow: hidden;
              .card-image{
                transform: scale(1.05);
              }
            }
          }

          &[data-animation~="animate4"]:hover {
            box-shadow: var(--composer-box-shadow);
          }
        }
      }
    }
  }
}

@keyframes slideOutFade {
  0% {
    transform: translateX(0%);
    opacity: 1;
  }
  90% {
    transform: translateX(70%);
    opacity: 0;
  }
  100% {
    transform: translateX(0%);
    opacity: 0;
  }
}

@keyframes shake {
  0% {
    transform: translateX(0);
  }
  25% {
    transform: translateX(var(--composer-gap-xs));
  }
  50% {
    transform: translateX(calc(-1 * var(--composer-gap-xs)));
  }
  75% {
    transform: translateX(var(--composer-gap-xs));
  }
  100% {
    transform: translateX(0);
  }
}

@keyframes resetShake {
  100% {
    transform: translateX(0);
  }
}
